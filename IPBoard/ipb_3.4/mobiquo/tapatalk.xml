<?xml version="1.0" encoding="utf-8"?>
<hookexport>
  <hookdata>
    <config>
      <hook_name>Tapatalk</hook_name>
      <hook_desc>Tapatalk Plugin for IPBoard 3.4+</hook_desc>
      <hook_author>Tapatalk</hook_author>
      <hook_email>admin@tapatalk.com</hook_email>
      <hook_website>https://tapatalk.com/activate_tapatalk.php?plugin=ipb</hook_website>
      <hook_update_check>https://tapatalk.com/v.php?sys=ip34</hook_update_check>
      <hook_requirements><![CDATA[a:3:{s:21:"required_applications";a:1:{s:6:"forums";a:3:{s:8:"app_name";s:6:"Forums";s:11:"min_version";i:30007;s:11:"max_version";i:0;}}s:20:"hook_php_version_min";s:0:"";s:20:"hook_php_version_max";s:0:"";}]]></hook_requirements>
      <hook_version_human>1.8.8</hook_version_human>
      <hook_version_long>18800</hook_version_long>
      <hook_extra_data><![CDATA[a:4:{s:7:"display";a:2:{s:8:"settings";s:463:"Setting groups: Tapatalk - General Settings, Tapatalk - In App Registration, Tapatalk BYO Settings<br />Settings: Advanced Delete Option, Android Product ID, BYO App Banner Message, BYO iOS App ID, Disable Ads for Group, Disable New Topic, Hide Forums, Kindle Fire Product URL, Mobile Welcome Screen, Registration Options, Registration URL, Spam Prevention, Tapatalk API Key, Tapatalk Plugin Directory, Thread Content Replacement (Advanced), User Group Assignment";s:8:"database";s:1348:"CREATE TABLE tapatalk_users (<br />
										  `userid` int(10) NOT NULL,  `ann` tinyint(1) NOT NULL DEFAULT '1',  `conv` tinyint(1) NOT NULL DEFAULT '1',  `sub` tinyint(1) NOT NULL DEFAULT '1',  `like` tinyint(1) NOT NULL DEFAULT '1',  `quote` tinyint(1) NOT NULL DEFAULT '1',  `newtopic` tinyint(1) NOT NULL DEFAULT '1',  `tag` tinyint(1) NOT NULL DEFAULT '1',  `updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,  PRIMARY KEY (`userid`)<br />
										) ENGINE=myisam<br />CREATE TABLE tapatalk_push_data (<br />
										  `push_id` int(10) NOT NULL AUTO_INCREMENT,  `author` varchar(100) NOT NULL,  `user_id` int(10) NOT NULL,  `data_type` char(20) NOT NULL,  `title` varchar(200) NOT NULL,  `data_id` int(10) NOT NULL,  `create_time` int(10) NOT NULL,  PRIMARY KEY (`push_id`),  KEY `user_id` (`user_id`),  KEY `create_time` (`create_time`)<br />
										) ENGINE=myisam<br />ALTER TABLE tapatalk_push_data ADD sub_id int(10) DEFAULT 0<br />ALTER TABLE tapatalk_push_data ADD author_id int(10) DEFAULT 0<br />ALTER TABLE tapatalk_users DROP ann<br />ALTER TABLE tapatalk_users DROP conv<br />ALTER TABLE tapatalk_users DROP sub<br />ALTER TABLE tapatalk_users DROP `like`<br />ALTER TABLE tapatalk_users DROP quote<br />ALTER TABLE tapatalk_users DROP newtopic<br />ALTER TABLE tapatalk_users DROP tag";}s:13:"settingGroups";a:3:{i:0;s:16:"tapatalk_general";i:1;s:17:"tapatalk_register";i:2;s:8:"Tapatalk";}s:8:"settings";a:16:{i:0;s:22:"tapatalk_delete_option";i:1;s:15:"app_android_url";i:2;s:18:"app_banner_message";i:3;s:10:"app_ios_id";i:4;s:16:"tapatalk_dis_ads";i:5;s:19:"tapatalk_forum_read";i:6;s:19:"tapatalk_hide_forum";i:7;s:14:"app_kindle_url";i:8;s:20:"tapatalk_full_banner";i:9;s:17:"tapatalk_reg_type";i:10;s:16:"tapatalk_reg_url";i:11;s:20:"tapatalk_spam_option";i:12;s:17:"tapatalk_push_key";i:13;s:18:"tapatalk_directory";i:14;s:23:"tapatalk_custom_replace";i:15;s:18:"tapatalk_reg_group";}s:8:"database";a:2:{s:6:"create";a:2:{i:0;a:3:{s:4:"name";s:14:"tapatalk_users";s:6:"fields";s:426:"  `userid` int(10) NOT NULL,  `ann` tinyint(1) NOT NULL DEFAULT '1',  `conv` tinyint(1) NOT NULL DEFAULT '1',  `sub` tinyint(1) NOT NULL DEFAULT '1',  `like` tinyint(1) NOT NULL DEFAULT '1',  `quote` tinyint(1) NOT NULL DEFAULT '1',  `newtopic` tinyint(1) NOT NULL DEFAULT '1',  `tag` tinyint(1) NOT NULL DEFAULT '1',  `updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,  PRIMARY KEY (`userid`)";s:9:"tabletype";s:6:"myisam";}i:1;a:3:{s:4:"name";s:18:"tapatalk_push_data";s:6:"fields";s:321:"  `push_id` int(10) NOT NULL AUTO_INCREMENT,  `author` varchar(100) NOT NULL,  `user_id` int(10) NOT NULL,  `data_type` char(20) NOT NULL,  `title` varchar(200) NOT NULL,  `data_id` int(10) NOT NULL,  `create_time` int(10) NOT NULL,  PRIMARY KEY (`push_id`),  KEY `user_id` (`user_id`),  KEY `create_time` (`create_time`)";s:9:"tabletype";s:6:"myisam";}}s:5:"alter";a:9:{i:0;a:6:{s:9:"altertype";s:3:"add";s:5:"table";s:18:"tapatalk_push_data";s:5:"field";s:6:"sub_id";s:8:"newfield";s:6:"sub_id";s:9:"fieldtype";s:7:"int(10)";s:7:"default";s:1:"0";}i:1;a:6:{s:9:"altertype";s:3:"add";s:5:"table";s:18:"tapatalk_push_data";s:5:"field";s:9:"author_id";s:8:"newfield";s:0:"";s:9:"fieldtype";s:7:"int(10)";s:7:"default";s:1:"0";}i:2;a:6:{s:9:"altertype";s:6:"remove";s:5:"table";s:14:"tapatalk_users";s:5:"field";s:3:"ann";s:8:"newfield";s:0:"";s:9:"fieldtype";s:0:"";s:7:"default";N;}i:3;a:6:{s:9:"altertype";s:6:"remove";s:5:"table";s:14:"tapatalk_users";s:5:"field";s:4:"conv";s:8:"newfield";s:0:"";s:9:"fieldtype";s:0:"";s:7:"default";N;}i:4;a:6:{s:9:"altertype";s:6:"remove";s:5:"table";s:14:"tapatalk_users";s:5:"field";s:3:"sub";s:8:"newfield";s:0:"";s:9:"fieldtype";s:0:"";s:7:"default";N;}i:5;a:6:{s:9:"altertype";s:6:"remove";s:5:"table";s:14:"tapatalk_users";s:5:"field";s:6:"`like`";s:8:"newfield";s:0:"";s:9:"fieldtype";s:0:"";s:7:"default";N;}i:6;a:6:{s:9:"altertype";s:6:"remove";s:5:"table";s:14:"tapatalk_users";s:5:"field";s:5:"quote";s:8:"newfield";s:0:"";s:9:"fieldtype";s:0:"";s:7:"default";N;}i:7;a:6:{s:9:"altertype";s:6:"remove";s:5:"table";s:14:"tapatalk_users";s:5:"field";s:8:"newtopic";s:8:"newfield";s:0:"";s:9:"fieldtype";s:0:"";s:7:"default";N;}i:8;a:6:{s:9:"altertype";s:6:"remove";s:5:"table";s:14:"tapatalk_users";s:5:"field";s:3:"tag";s:8:"newfield";s:0:"";s:9:"fieldtype";s:0:"";s:7:"default";N;}}}}]]></hook_extra_data>
      <hook_key>tapatalk</hook_key>
      <hook_global_caches/>
    </config>
  </hookdata>
  <hookfiles>
    <file>
      <hook_file_real>tapatalk_displayAppIconForOnlineUser.php</hook_file_real>
      <hook_type>templateHooks</hook_type>
      <hook_classname>tapatalk_displayAppIconForOnlineUser</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:0:"";s:15:"classToOverload";s:0:"";s:9:"skinGroup";s:11:"skin_online";s:12:"skinFunction";s:14:"showOnlineList";s:4:"type";s:2:"if";s:2:"id";s:7:"nowhere";s:8:"position";s:11:"pre.startif";}]]></hook_data>
      <hooks_source><![CDATA[<?php

class tapatalk_displayAppIconForOnlineUser
{
    /**
     * Registry object
     *
     * @var     object
     */
    protected $registry;

    /**
     * Constructor
     *
     * @return  @e void
     */
    public function __construct()
    {
        $this->registry = ipsRegistry::instance();
    }

    public function getOutput()
    {
    }

    /**
     * Replace output
     *
     * @param   string      Output
     * @param   string      Hook key
     * @return  string      Output parsed
     */
    public function replaceOutput( $output, $key )
    {
        if (($oTpl = $this->registry->output->getTemplate('online')) && $oTpl->functionData['showOnlineList'][0]['rows']) {
            $settings = ipsRegistry::$settings;
            $board_url = $this->registry->output->isHTTPS ? str_replace('http:', 'https:', $settings['board_url']) : $settings['board_url'];
            $tapatalkdir = isset($settings['tapatalk_directory']) && !empty($settings['tapatalk_directory'])
                           ? $settings['tapatalk_directory'] : 'mobiquo';
            $iconUrl = $board_url.'/'.$tapatalkdir.'/online.png';
            //$iconUrl_byo = $board_url.'/'.$tapatalkdir.'/byo-online.png';
            
            $tag    = '<!--hook.' . $key . '-->';
            $last   = 0;

            foreach( $oTpl->functionData['showOnlineList'][0]['rows'] as $row )
            {
                $pos    = strpos( $output, $tag, $last );

                if( $pos )
                {
                    if (stripos($row['browser'], 'byo') !== false) {
                        $app_url = 'https://tapatalk.com';
                        if (stripos($row['browser'], 'byo-4') !== false) {
                            if ($settings['app_android_url'] && $settings['app_android_url'] != '-1') {
                                if (preg_match('/details\?id=([\w\.]+)/i', $settings['app_android_url'], $matches)) {
                                    $app_url = 'https://play.google.com/store/apps/details?id='.$matches[1];
                                } else {
                                    $app_url = 'https://play.google.com/store/apps/details?id='.$settings['app_android_url'];
                                }
                            }
                        } else {
                            if (intval($settings['app_ios_id']) && intval($settings['app_ios_id']) != '-1') {
                                $app_url = 'https://itunes.apple.com/us/app/id'.intval($settings['app_ios_id']);
                            }
                        }
                        
                        $prefix = '<a href="'.$app_url.'" target="_blank" title="On Forum App"><img src="'.$iconUrl.'" border="0" /></a>';
                        $output = substr_replace( $output, $prefix . $tag, $pos, strlen( $tag ) );
                        $last   = $pos + strlen( $prefix . $tag );
                    } else if (stripos($row['browser'], 'tapatalk') !== false) {
                        $prefix = '<img src="'.$iconUrl.'" border="0" />';
                        $output = substr_replace( $output, $prefix . $tag, $pos, strlen( $tag ) );
                        $last   = $pos + strlen( $prefix . $tag );
                    } else {
                        $last   = $pos + strlen( $tag );
                    }
                }
            }
        }

        return $output;
    }

}

?>]]></hooks_source>
    </file>
    <file>
      <hook_file_real>tapatalk_login.php</hook_file_real>
      <hook_type>commandHooks</hook_type>
      <hook_classname>tapatalk_login</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:0:"";s:15:"classToOverload";s:24:"public_core_global_login";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[<?php

class tapatalk_login extends (~extends~)
{
    public function loginForm( $message="", $replacement='' )
    {
        if (defined('IN_MOBIQUO'))
        {
            if ($message == 'admin_force_log_in')
            {
                $this->registry->getClass('output')->showError($message);
            }
        }
        
        parent::loginForm($message, $replacement);
    }
}]]></hooks_source>
    </file>
    <file>
      <hook_file_real>tapatalk_post.php</hook_file_real>
      <hook_type>commandHooks</hook_type>
      <hook_classname>tapatalk_post</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:0:"";s:15:"classToOverload";s:23:"public_forums_post_post";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[<?php

class tapatalk_post extends (~extends~)
{
    public function doExecute( ipsRegistry $registry )
    {
        if (defined('IN_MOBIQUO'))
        {
            $this->settings['tags_min_req'] = 0;
            $this->settings['tags_min'] = 0;
            $this->request['auth_key'] = $this->member->form_hash;
            $this->request['enablesig'] = 'yes';
            $this->request['enableemo'] = 'yes';
            
            $_POST['Post'] = cleanPost($_POST['Post']);
            
            //force MobileSkin false
            $this->registry->output->setAsMobileSkin(false);
            
            // Convert POST content from BBCODE to HTML
            $classToLoad = IPSLib::loadLibrary( IPS_ROOT_PATH . 'sources/classes/text/parser.php', 'classes_text_parser' );
            $parser = new $classToLoad();
            
            /* Set up some settings */
            $parser->set( array( 'parseArea'      => 'topics',
                                 'memberData'     => $this->memberData,
                                 'parseBBCode'    => true,
                                 'parseHtml'      => false,
                                 'parseEmoticons' => true ) );
            $parser->setForceBbcode(true);
            $_POST['Post'] = $parser->BBCodeToHtml( $_POST['Post'] );
            
            // Convert POST content from UTF8 to local forum Document character set
            $_POST['Post'] = to_local($_POST['Post']);
            if (isset($_POST['TopicTitle']))
                $_POST['TopicTitle'] = to_local($_POST['TopicTitle']);
            if (isset($this->request['post_edit_reason']))
                $this->request['post_edit_reason'] = to_local($this->request['post_edit_reason']);
            
            $this->request['Post'] = cleanPost($_POST['Post']);
            
            // prepare prefix for tag
            if (isset($_POST['ipsTags']) && $_POST['ipsTags'])
            {
                $_POST['ipsTags'] = to_local($_POST['ipsTags']);
                
                if ($this->settings['tags_can_prefix'])
                {
                    if ($this->memberData['g_is_supmod'] || (
                            $this->settings['tags_enabled'] 
                        && !$this->memberData['bw_disable_tagging']
                        && !$this->memberData['gbw_disable_tagging']
                        && !$this->memberData['bw_disable_prefixes']
                        && !$this->memberData['gbw_disable_prefixes'])
                       )
                    {
                        $_POST['ipsTags_prefix'] = 1;
                        $_REQUEST['ipsTags_prefix'] = 1;
                        $this->request['ipsTags_prefix'] = 1;
                    }
                }
            }
            if (isset($this->request['ipsTags']))
                $this->request['ipsTags'] = to_local($this->request['ipsTags']);
            
            if ($this->request['p'] && empty($this->request['t']))
            {
                $post = $this->DB->buildAndFetch( array( 'select' => 'p.*', 'from' => array( 'posts' => 'p' ), 'where' => "p.pid={$this->request['p']}" ) );
                $this->request['t'] = $post['topic_id'];
            }
            
            if ($this->request['t'] && empty($this->request['f']))
            {
                $topic = $this->DB->buildAndFetch( array( 'select' => 't.*', 'from' => array( 'topics' => 't' ), 'where' => "t.tid={$this->request['t']}" ) );
                $this->request['f'] = $topic['forum_id'];
            }
            
            $_track = 0;
            if (isset($this->request['t']) && $this->memberData['member_id'])
            {
                require_once( IPS_ROOT_PATH . 'sources/classes/like/composite.php' );/*noLibHook*/
                $_like  = classes_like::bootstrap( 'forums', 'topics' );
                $_track = $_like->isLiked( $this->request['t'], $this->memberData['member_id'] );
            }
            
            if (isset($this->request['p']))
                $this->request['enabletrack'] = $_track;
            else if (isset($this->request['t']))
                $this->request['enabletrack'] = $this->memberData['auto_track'] ? 1 : $_track;
            else
                $this->request['enabletrack'] = $this->memberData['auto_track'] ? 1 : 0;
        }
        
        parent::doExecute($registry);
        
        if (defined('IN_MOBIQUO'))
        {
            global $result, $request_name;
            
            switch ($request_name)
            {
                case 'new_topic':
                    $result = $this->_postClass->getTopicData();
                    break;
                case 'reply_post':
                    $result = $this->_postClass->getPostData();
                    break;
                case 'save_raw_post':
                    $result = true;
                    break;
            }
        }
    }
}]]></hooks_source>
    </file>
    <file>
      <hook_file_real>tapatalk_classPostForms.php</hook_file_real>
      <hook_type>libraryHooks</hook_type>
      <hook_classname>tapatalk_classPostForms</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:6:"forums";s:15:"classToOverload";s:14:"classPostForms";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[<?php

class tapatalk_classPostForms extends (~extends~)
{
    public function sendOutQuoteNotifications( $post, $subscriptionSentTo )
    {
        if ($this->DB->checkForTable( 'tapatalk_users' ) && file_exists( DOC_IPS_ROOT_PATH . $this->settings['tapatalk_directory'] . '/lib/class_push.php' ))
        {
            $connect_status = function_exists('curl_init') || ini_get('allow_url_fopen');
            $classToLoad = IPSLib::loadLibrary( DOC_IPS_ROOT_PATH . $this->settings['tapatalk_directory'] . '/lib/class_push.php', 'tapatalk_push' );
            $notifyLibrary = new $classToLoad( $this->registry );
            $notifyLibrary->notifyTag( $post, $subscriptionSentTo, $connect_status );
        }
        
        parent::sendOutQuoteNotifications( $post, $subscriptionSentTo );
    }
    
    public function getPostEditReason()
    {
        if ( isset( $this->moderator['edit_post'] ) && $this->moderator['edit_post'] OR $this->getAuthor('g_is_supmod') )
            return isset($this->_originalPost['post_edit_reason']) ? $this->_originalPost['post_edit_reason'] : '';
        else
            return false;
    }
}

?>]]></hooks_source>
    </file>
    <file>
      <hook_file_real>tapatalk_notifications.php</hook_file_real>
      <hook_type>libraryHooks</hook_type>
      <hook_classname>tapatalk_notifications</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:4:"core";s:15:"classToOverload";s:13:"notifications";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[<?php

class tapatalk_notifications extends (~extends~)
{
    static public $post = array();
    static public $alreadyNotifiedUids = array();
    
    public function sendNotification()
    {
        $push_status = false;
        if((function_exists('curl_init') || ini_get('allow_url_fopen'))
            && file_exists( DOC_IPS_ROOT_PATH . $this->settings['tapatalk_directory'] . '/lib/class_push.php' ))
        {
            $push_status = true;
        }
        if ( $this->DB->checkForTable( 'tapatalk_users' ))
        {
            $classToLoad    = IPSLib::loadLibrary( DOC_IPS_ROOT_PATH . $this->settings['tapatalk_directory'] . '/lib/class_push.php', 'tapatalk_push' );
            $notifyLibrary  = new $classToLoad( $this->registry );
            
            $touids = array();
            $recipients = empty( $this->_recipients ) ? array( $this->_member ) : $this->_recipients;
            
            foreach ( $recipients as $r )
            {
                if ( is_array( $r ) )
                {
                    if( $r['member_banned'] || ! $r['member_id']) continue;
                    if (in_array($r['member_id'], self::$alreadyNotifiedUids)) continue;
                    $touids[] = $r['member_id'];
                    self::$alreadyNotifiedUids[] = $r['member_id'];
                }
            }
            
            if (!empty($touids))
            {
                switch ($this->_notificationKey)
                {
                    case 'new_likes':
                        if ($this->request['type'] == 'pid')
                        {
                            $postid = intval( $this->request['type_id'] );
                            $post = $this->registry->getClass('topics')->getPostById( $postid );
                            $notifyLibrary->notifyPost( $post, $touids, 'like', $push_status);
                        }
                        break;
                    case 'new_reply':
                    case 'followed_topics':
                        $notifyLibrary->notifyPost( $this->getCurrentPost(), $touids, 'sub', $push_status);
                        break;
                    case 'post_quoted':
                        // user got tag notification don't need to get quoted notification again
                        $touids = array_diff($touids, $notifyLibrary->getTagUids());
                        $notifyLibrary->notifyPost( $this->getCurrentPost(), $touids, 'quote', $push_status);
                        break;
                    case 'new_private_message':
                    case 'reply_private_message':
                        $msg_topic_id = $this->_metaData['meta_id'];
                        if (empty($msg_topic_id))
                        {
                            preg_match('/topicID=(\d+)/', $this->_notificationUrl, $match);
                            $msg_topic_id = $match[1];
                        }
                        
                        if ($msg_topic_id)
                        {
                            $GLOBALS['new_conv_id'] = $msg_topic_id;
                            $convData = $this->DB->buildAndFetch( array( 'select' => '*',
                                                                         'from'   => 'message_topics',
                                                                         'where'  => 'mt_id=' . intval( $msg_topic_id ) ) );
                            $notifyLibrary->notifyConv( $convData, $touids, 'conv', $push_status);
                        }
                        break;
                    case 'new_topic':
                    case 'followed_forums':
                        $notifyLibrary->notifyPost( $this->getCurrentPost(), $touids, 'newtopic', $push_status);
                        break;
                }
            }
        }

        parent::sendNotification();
    }
    
    public function getCurrentPost()
    {
        if (empty(self::$post))
        {
            if ($this->request['t'])
            {
                $topic_id = intval( $this->request['t'] );
                $topic = $this->DB->buildAndFetch( array( 'select' => '*', 'from' => 'topics', 'where' => 'tid=' . $topic_id ) );
                $post = $this->DB->buildAndFetch( array(
                                                        'select'    => '*',
                                                        'from'      => 'posts',
                                                        'where'     => 'topic_id=' . $topic_id . ' and author_id=' . $this->memberData['member_id'],
                                                        'order'     => 'post_date desc',
                                                        'limit'     => array( 1 ) ));
                self::$post = array(
                    'topic_id'  => $topic_id,
                    'title'     => $topic['title'],
                    'pid'       => $post['pid'],
                    'post_date' => $post['post_date'],
                );
            }
            else if ($this->request['f'])
            {
                $forum_id = intval( $this->request['f'] );
                $topic = $this->DB->buildAndFetch( array(
                                                        'select'    => '*',
                                                        'from'      => 'topics',
                                                        'where'     => 'forum_id=' . $forum_id . ' and starter_id=' . $this->memberData['member_id'],
                                                        'order'     => 'start_date desc',
                                                        'limit'     => array( 1 ) ));
                $post = $this->DB->buildAndFetch( array(
                                                        'select'    => '*',
                                                        'from'      => 'posts',
                                                        'where'     => 'topic_id=' . $topic['tid'] . ' and author_id=' . $this->memberData['member_id'],
                                                        'order'     => 'post_date desc',
                                                        'limit'     => array( 1 ) ));
                self::$post = array(
                    'topic_id'  => $topic['tid'],
                    'title'     => $topic['title'],
                    'pid'       => $post['pid'],
                    'post_date' => $topic['start_date'],
                );
            }
        }
        
        return self::$post;
    }
}

?>]]></hooks_source>
    </file>
    <file>
      <hook_file_real>tapatalk_register_protection.php</hook_file_real>
      <hook_type>commandHooks</hook_type>
      <hook_classname>tapatalk_register_protection</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:0:"";s:15:"classToOverload";s:27:"public_core_global_register";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[<?php

class tapatalk_register_protection extends (~extends~)
{
    public function registerProcessForm()
    {
        $in_email = strtolower( trim( $this->request['EmailAddress'] ) );
        
        if ($this->settings['tapatalk_spam_option'] > 1 && $in_email)
        {
            /* Get the file managemnet class */
            $classToLoad = IPSLib::loadLibrary( IPS_KERNEL_PATH . 'classFileManagement.php', 'classFileManagement' );
            $query = new $classToLoad();
            $query->timeout = ipsRegistry::$settings['spam_service_timeout'];
            
            $ip = $this->member->ip_address;
            $ipcheck = $ip ? "&ip={$ip}" : '';
            
            /* Query the service */
            $response = $query->getFileContents( "http://www.stopforumspam.com/api?f=serial&email={$in_email}".$ipcheck );
            $response = unserialize($response);
            
            if ((isset($response['email']['confidence']) && $response['email']['confidence'] > 50) ||
                (isset($response['ip']['confidence']) && $response['ip']['confidence'] > 60))
            {
                $this->registry->output->showError( 'spam_denied_account', '100x001', FALSE, '', 200 );
            }
        }
        
        parent::registerProcessForm();
    }
}]]></hooks_source>
    </file>
    <file>
      <hook_file_real>tapatalk_profile.php</hook_file_real>
      <hook_type>commandHooks</hook_type>
      <hook_classname>tapatalk_profile</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:0:"";s:15:"classToOverload";s:27:"public_members_profile_view";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[<?php

class tapatalk_profile extends (~extends~)
{
    public function doExecute( ipsRegistry $registry )
    {
        if (defined('IN_MOBIQUO'))
        {
            global $profile, $required_custom_fields;
            
            // process prefetch_account
            if (isset($this->request['email']))
            {
                if (empty($this->request['email']))
                    $this->registry->output->showError("Invalid parameter");
                
                $profile = IPSMember::load($this->request['email'], 'all', 'email');
                
                //-----------------------------------------
                // Custom fields
                //-----------------------------------------
                
                $classToLoad        = IPSLib::loadLibrary( IPS_ROOT_PATH . 'sources/classes/customfields/profileFields.php', 'customProfileFields' );
                $custom_fields      = new $classToLoad();
                
                $custom_fields->member_data = $this->memberData;
                $custom_fields->initData( 'edit', 0, array( 'tabindex' => 6 ) );
                $custom_fields->parseToEdit( 'register' );
                
                if ( count( $custom_fields->out_fields ) )
                {
                    foreach( $custom_fields->out_fields as $id => $form_element )
                    {
                        if ( $custom_fields->cache_data[ $id ]['pf_not_null'] == 1 )
                        {
                            $custom_field_data = array(
                                'name'          => new xmlrpcval(subject_clean($custom_fields->field_names[ $id ]), 'base64'),
                                'description'   => new xmlrpcval(subject_clean($custom_fields->field_desc[ $id ]), 'base64'),
                                'key'           => new xmlrpcval('field_'.$id),
                                'real_key'      => new xmlrpcval($custom_fields->cache_data[ $id ]['pf_key']),
                                'type'          => new xmlrpcval($custom_fields->cache_data[ $id ]['pf_type']),
                            );
                            
                            if (in_array($custom_fields->cache_data[ $id ]['pf_type'], array('drop', 'cbox', 'radio')))
                            {
                                $custom_field_data['options'] = new xmlrpcval(subject_clean($custom_fields->cache_data[ $id ]['pf_content']), 'base64');
                            }
                            else if ($custom_fields->cache_data[ $id ]['pf_input_format'])
                            {
                                $custom_field_data['format'] = new xmlrpcval($custom_fields->cache_data[ $id ]['pf_input_format']);
                            }
                            
                            $required_custom_fields[] = new xmlrpcval($custom_field_data, 'struct');
                        }
                    }
                }
                
                return;
            }
            
            // fetch user id from displayname
            if (empty($this->request['id']) && isset($this->request['user_name']))
            {
                $displayname = to_local($this->request['user_name']);
                $member = IPSMember::load( $displayname, 'core', 'displayname' );
                $this->request['id'] = $member['member_id'];
            }
            
            $this->registry->class_localization->loadLanguageFile( array( 'public_profile' ), 'members' );
            $this->registry->class_localization->loadLanguageFile( array( 'public_online' ), 'members' );
            
            $this->_viewModern();
            
            // prepare user profile for tapatalk display
            $profile = ipsRegistry::instance()->output->getTemplate('profile')->functionData['profileModern'][0]['member'];
            
            $profile['custom_fields_list'] = array(
                array (
                    'name' => $this->lang->words['m_group'],
                    'value' => $profile['g_title'],
                ),
                array (
                    'name'  => $this->lang->words['m_profile_views'],
                    'value' =>  $profile['members_profile_views'],
                ),
                array (
                    'name'  => $this->lang->words['m_currently'],
                    'value' => subject_clean($profile['_online'] ? $profile['online_extra'] : $this->lang->words['online_offline']),
                ),
                array(
                    'name'  => $this->lang->words['m_member_title'],
                    'value' => $profile['title'],
                ),
                array(
                    'name'  => $this->lang->words['m_age_prefix'],
                    'value' => $profile['_age'] > 0 ? $profile['_age'].' '.$this->lang->words['m_years_old'] : $this->lang->words['m_age_unknown'],
                ),
                array(
                    'name'  => $this->lang->words['m_birthday_prefix'],
                    'value' => $profile['bday_day'] ? $profile['_bday_month'].' '.$profile['bday_day'].($profile['bday_year'] ? ', '.$profile['bday_year'] : '') : $this->lang->words['m_bday_unknown'],
                ),
            );
            
            if (isset($profile['custom_fields']['profile_info']) && count($profile['custom_fields']['profile_info']))
            {
                foreach($profile['custom_fields']['profile_info'] as $profile_info)
                {
                    if (preg_match("/<span class='row_title'>(.*?)<\/span>/si", $profile_info, $match))
                    {
                        $profile['custom_fields_list'][] = array(
                            'name'  => $match[1],
                            'value' => str_replace($match[0], '', $profile_info),
                        );
                    }
                }
            }
            
            if (isset($profile['custom_fields']['contact']) && count($profile['custom_fields']['contact']))
            {
                foreach($profile['custom_fields']['contact'] as $contact)
                {
                    if (preg_match("/<span class='row_title'>(.*?)<\/span>/si", $contact, $match))
                    {
                        $profile['custom_fields_list'][] = array(
                            'name'  => $match[1],
                            'value' => str_replace($match[0], '', $contact),
                        );
                    }
                }
            }
        }
        else
            parent::doExecute($registry);
    }
}
]]></hooks_source>
    </file>
    <file>
      <hook_file_real>tapatalk_output.php</hook_file_real>
      <hook_type>libraryHooks</hook_type>
      <hook_classname>tapatalk_output</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:4:"core";s:15:"classToOverload";s:6:"output";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[<?php

class tapatalk_output extends (~extends~)
{
    public function __construct( ipsRegistry $registry, $initialize=FALSE )
    {
        parent::__construct( $registry, $initialize );
        
        if (defined('IN_MOBIQUO') && !defined('MOBIQUO_HEAD_READY'))
        {
            @header('Mobiquo_is_login:'.($this->memberData['member_id'] ? 'true' : 'false'));
            @header('Mobiquo-Hook:1');
            define('MOBIQUO_HEAD_READY', true);
        }
    }
    
    public function showError( $message, $code=0, $logError=FALSE, $logExtra='', $header=401 )
    {
        if (defined('IN_MOBIQUO'))
        {
            $header = 200;
            $msg    = "";
            $extra  = "";
            $this->registry->getClass('class_localization')->loadLanguageFile( array( "public_error" ), 'core' );
    
            if ( is_array( $message ) )
            {
                $msg    = $message[0];
                $extra  = $message[1];
            }
            else
            {
                $msg    = $message;
            }
            
            $msg = ( isset($this->lang->words[ $msg ]) ) ? $this->lang->words[ $msg ] : $msg;
                
            if ( $extra )
            {
                $msg = sprintf( $msg, $extra );
            }
            
            @header('Content-Type: text/xml');
            
            if (!defined('MOBIQUO_HEAD_READY'))
                @header('Mobiquo_is_login:'.($this->memberData['member_id'] ? 'true' : 'false'));
            
            $response_php = array(
                'result'        => new xmlrpcval(false, 'boolean'),
                'result_text'   => new xmlrpcval(subject_clean($msg), 'base64'),
            );
            
            if ($code < 0) $response_php['status'] = new xmlrpcval(abs($code), 'string');
            
            $response = new xmlrpcresp(new xmlrpcval($response_php, 'struct'));
        
            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n".$response->serialize('UTF-8');
            exit;
        }
        else
            parent::showError( $message, $code, $logError, $logExtra, $header );
    }
    
    public function replaceMacros( $text )
    {
        if (!defined('IN_MOBIQUO') && class_exists('public_forums_ajax_topics') && $this->request['do'] == 'editBoxSave')
        {
            // display emoji from app
            $protocol = $this->registry->output->isHTTPS ? 'https' : 'http';
            $text = preg_replace('/\[emoji(\d+)\]/i', '<img src="'.$protocol.'://s3.amazonaws.com/tapatalk-emoji/emoji\1.png" />', $text);
        }
        
        return parent::replaceMacros( $text );
    }
    
    public function redirectScreen( $text="", $url="", $seoTitle="", $seoTemplate='' )
    {
        
        if (defined('IN_MOBIQUO'))
        {
            global $result_text, $request_name;
            switch($request_name)
            {
                case 'm_close_report': return;
                case 'new_topic': 
                case 'reply_post': $result_text = $text;
                case 'save_raw_post': return;
                case 'new_conversation':define('FUNC_SUCCESS', true);return;
            }
        }
        
        parent::redirectScreen( $text, $url, $seoTitle, $seoTemplate );
    }
    
    public function silentRedirect( $url, $seoTitle='', $send301=FALSE, $seoTemplate='' )
    {               
        if (defined('IN_MOBIQUO'))
        {
            global $request_name;
            
            if ($url == $this->settings['base_url']."app=core&amp;module=usercp&amp;tab=core&amp;area=ignoredusers&amp;do=show")
                return;
            else if (in_array($request_name, array('new_topic', 'reply_post', 'm_close_report')))
                return;
            else if (in_array($request_name, array('update_signature')))
            {
                define('FUNC_SUCCESS', true);
                return;
            }
            else if (in_array($request_name, array('reply_conversation')))
            {
                preg_match( "/(?<=msgID=)\d+/", $url, $matches );
                $GLOBALS['new_msg_id'] = $matches[0];
                define('FUNC_SUCCESS', true);
                return;
            }
            else if ($url == $this->settings['base_url'].'app=core&amp;module=global&amp;section=register&amp;do=07')
            {
                global $result_text;
                $this->registry->class_localization->loadLanguageFile( array( 'public_register' ), 'core' );
                $result_text = $this->lang->words['validate_instructions_1'];
                return;
            }
        }
        else
            parent::silentRedirect( $url, $seoTitle, $send301, $seoTemplate );
    }
    
    public function addContent( $content, $prepend=false )
    {
        if (!defined('IN_MOBIQUO') && (class_exists('public_forums_forums_topics') || class_exists('public_members_messaging_view')))
        {
            // display emoji from app
            $content = preg_replace('/\[emoji(\d+)\]/', '<img src="https://s3.amazonaws.com/tapatalk-emoji/emoji\1.png" />', $content);
        }
        
        parent::addContent( $content, $prepend );
    }
    
    public function sendOutput( $return=false )
    {
        if (defined('IN_MOBIQUO'))
        {
            if (defined('FUNC_SUCCESS'))return;
            $this->showError($this->_html);
        }
        else
            return parent::sendOutput($return);
    }
    
    public function showBoardOffline()
    {
        if (defined('IN_MOBIQUO'))
        {
            if( !$this->offlineMessage )
            {
                $row = $this->DB->buildAndFetch( array( 'select' => '*', 'from' => 'core_sys_conf_settings', 'where' => "conf_key='offline_msg'" ) );
                
                $this->registry->getClass( 'class_localization')->loadLanguageFile( array( "public_error" ), 'core' );
                
                $this->offlineMessage = $row['conf_value'];
            }
            
            IPSText::getTextClass('bbcode')->parse_bbcode       = 1;
            IPSText::getTextClass('bbcode')->parse_html         = 1;
            IPSText::getTextClass('bbcode')->parse_emoticons    = 1;
            IPSText::getTextClass('bbcode')->parse_nl2br        = 1;
            IPSText::getTextClass('bbcode')->parsing_section    = 'global';
            
            $this->offlineMessage = IPSText::getTextClass('bbcode')->preDisplayParse( IPSText::getTextClass('bbcode')->preDbParse( $this->offlineMessage ) );
            $this->offlineMessage = sprintf( $this->lang->words['board_offline_desc'], $this->settings['board_name']) . "\n" . $this->offlineMessage;
            
            $this->showError($this->offlineMessage);
        }
        else
            parent::showBoardOffline($return);
    }
}]]></hooks_source>
    </file>
    <file>
      <hook_file_real>tapatalk_permissions.php</hook_file_real>
      <hook_type>libraryHooks</hook_type>
      <hook_classname>tapatalk_permissions</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:4:"core";s:15:"classToOverload";s:22:"classPublicPermissions";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[<?php

class tapatalk_permissions extends (~extends~)
{
    public function check( $perm, $row, $otherMasks=array() )
    {
        if (defined('IN_MOBIQUO'))
        {
            global $mobiquo_config;
            if (($perm == 'read' || $perm == 'view') && isset($row['sub_can_post']) 
                && isset($row['id']) && isset($mobiquo_config['hide_forum_id']) && is_array($mobiquo_config['hide_forum_id'])
                && in_array($row['id'], $mobiquo_config['hide_forum_id']))
            {
                return false;
            }
        }
        
        return parent::check( $perm, $row, $otherMasks );
    }
}

?>]]></hooks_source>
    </file>
    <file>
      <hook_file_real>tapatalk_banner_body.php</hook_file_real>
      <hook_type>templateHooks</hook_type>
      <hook_classname>tapatalk_banner_body</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:0:"";s:15:"classToOverload";s:0:"";s:9:"skinGroup";s:11:"skin_global";s:12:"skinFunction";s:14:"globalTemplate";s:4:"type";s:2:"if";s:2:"id";s:11:"brandingBar";s:8:"position";s:11:"pre.startif";}]]></hook_data>
      <hooks_source><![CDATA[<?php

class tapatalk_banner_body
{
    public function getOutput()
    {
        return '
            <!-- Tapatalk Banner body start -->
            <script type="text/javascript">if (typeof(tapatalkDetect) == "function") tapatalkDetect();</script>
            <!-- Tapatalk Banner body end -->
        ';
    }
}
]]></hooks_source>
    </file>
    <file>
      <hook_file_real>tapatalk_profile_skin.php</hook_file_real>
      <hook_type>templateHooks</hook_type>
      <hook_classname>tapatalk_profile_skin</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:0:"";s:15:"classToOverload";s:0:"";s:9:"skinGroup";s:12:"skin_profile";s:12:"skinFunction";s:13:"profileModern";s:4:"type";s:2:"if";s:2:"id";s:16:"hasCustomization";s:8:"position";s:11:"pre.startif";}]]></hook_data>
      <hooks_source><![CDATA[<?php

class tapatalk_profile_skin
{
    public function getOutput()
    {
    }
}]]></hooks_source>
    </file>
    <file>
      <hook_file_real>tapatalk_banner_head.php</hook_file_real>
      <hook_type>templateHooks</hook_type>
      <hook_classname>tapatalk_banner_head</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:0:"";s:15:"classToOverload";s:0:"";s:9:"skinGroup";s:11:"skin_global";s:12:"skinFunction";s:11:"includeMeta";s:4:"type";s:2:"if";s:2:"id";s:8:"metatags";s:8:"position";s:11:"pre.startif";}]]></hook_data>
      <hooks_source><![CDATA[<?php

class tapatalk_banner_head
{
    public function __construct()
    {
        $this->registry = ipsRegistry::instance();
    }
    
    public function getOutput()
    {
        //if (ipsRegistry::member()->user_agent && !preg_match('/iPhone|iPod|iPad|Silk|Android|IEMobile|Windows Phone/i', ipsRegistry::member()->user_agent))
        //    return '';
        
        $settings = ipsRegistry::$settings;
        $request = ipsRegistry::fetchRequest();
        $member = ipsRegistry::member()->fetchMemberData();
        
        $board_url = $this->registry->output->isHTTPS ? str_replace('http:', 'https:', $settings['board_url']) : $settings['board_url'];
        $tapatalk_dir_name = isset($settings['tapatalk_directory']) && !empty($settings['tapatalk_directory']) ? $settings['tapatalk_directory'] : 'mobiquo';
        $tapatalk_dir = DOC_IPS_ROOT_PATH . $tapatalk_dir_name;
        $tapatalk_dir_url = $board_url.'/'.$tapatalk_dir_name;
        $is_mobile_skin = $this->registry->output->getAsMobileSkin() ? 1 : 0;
        
        $app_location_url = preg_replace('#^https?://#si', 'tapatalk://', $board_url);
        $app_location_url = preg_replace('#/$#si', '', $app_location_url);
        $app_location_url.= '/?user_id='.$member['member_id'];
        
        $app_location_url.= '&location='.(
            isset($request['p']) && intval($request['p']) ? 'post' : (
            isset($request['t']) && intval($request['t']) ? 'topic' : (
            isset($request['f']) && intval($request['f']) ? 'forum' : (
            isset($request['module']) && $request['module'] == 'profile' ? 'profile' : (
            isset($request['module']) && $request['module'] == 'messaging' ? 'message' : (
            isset($request['module']) && $request['module'] == 'online' ? 'online' : (
            isset($request['module']) && $request['module'] == 'search' ? 'search' : (
            isset($request['section']) && $request['section'] == 'login' ? 'login' : (
            'index')))))))));
        
        if (isset($request['f']) && intval($request['f'])) $app_location_url .= '&fid='.intval($request['f']);
        if (isset($request['t']) && intval($request['t'])) $app_location_url .= '&tid='.intval($request['t']);
        if (isset($request['p']) && intval($request['p'])) $app_location_url .= '&pid='.intval($request['p']);
        if (isset($request['topicID']) && intval($request['topicID'])) $app_location_url .= '&mid='.intval($request['topicID']);
        if (isset($request['page']) && intval($request['page'])) 
        {
            $app_location_url .= '&page='.intval($request['page']);
        }
        if     ((isset($request['t']))&&(intval($request['t'])!==0)) $app_location_url .= '&perpage='.$settings['display_max_posts'];
        else if((isset($request['f']))&&(intval($request['f'])!==0)) $app_location_url .= '&perpage='.$settings['display_max_topics'];
        $app_forum_name = $settings['board_name'];
        $app_banner_message = $settings['app_banner_message'];
        $app_ios_id = $settings['app_ios_id'];
        $app_android_id = $settings['app_android_url']; // history problem, app_android_url is app_android_id in IPB
        $app_kindle_url = $settings['app_kindle_url'];
        
        $api_key = $settings['tapatalk_push_key'];
        $app_ads_enable = $settings['tapatalk_full_banner'];
        
        // get page type
        if (@is_a(ipsController::$cmd, 'public_forums_forums_boards'))
            $page_type = 'index';
        else if (@is_a(ipsController::$cmd, 'public_forums_forums_forums'))
            $page_type = 'forum';
        else if (@is_a(ipsController::$cmd, 'public_forums_forums_topics'))
            $page_type = 'topic';
        else
            $page_type = 'other';
        
        if (file_exists($tapatalk_dir . '/smartbanner/head.inc.php'))
            include($tapatalk_dir . '/smartbanner/head.inc.php');

        return isset($app_head_include) ? $app_head_include : '';
    }
}
]]></hooks_source>
    </file>
    <file>
      <hook_file_real>tapatalk_report.php</hook_file_real>
      <hook_type>commandHooks</hook_type>
      <hook_classname>tapatalk_report</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:0:"";s:15:"classToOverload";s:27:"public_core_reports_reports";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[<?php

class tapatalk_report extends (~extends~)
{
    public function doExecute( ipsRegistry $registry )
    {
        if (defined('IN_MOBIQUO'))
        {
            $this->registry->class_localization->loadLanguageFile( array( 'public_reports' ) );
            $this->DB->loadCacheFile( IPSLib::getAppDir('core') . '/sql/' . ips_DBRegistry::getDriverType() . '_report_queries.php', 'report_sql_queries' );
            $classToLoad = IPSLib::loadLibrary( IPSLib::getAppDir('core') .'/sources/classes/reportLibrary.php', 'reportLibrary' );
            $this->registry->setClass( 'reportLibrary', new $classToLoad( $this->registry ) );
    
            // Check permissions...
            if( $this->request['do'] AND $this->request['do'] != 'report' AND !IPSMember::isInGroup( $this->memberData, explode( ',', IPSText::cleanPermString( $this->settings['report_mod_group_access'] ) ) ) )
            {
                $this->registry->output->showError( 'no_reports_permission', 2018, true, null, 403 );
            }

            switch( $this->request['do'] )
            {
                default:
                case 'report':
                    $this->_initReportForm();
                    break;
                
                case 'showMessage':
                    $this->_viewReportedMessage();
                    break;
                
                case 'index':
                    $this->_displayReportCenter();
                    break;
                
                case 'process':
                    $this->request['k'] = $this->member->form_hash;
                    $this->memberData['g_access_cp'] = 1;
                    $this->_processReports();
                    break;
                
                case 'findfirst':
                    $this->findFirstReport();
                    break;
    
                case 'show_report':
                    $this->_displayReport();
                    break;
            }
        }
        else
            parent::doExecute($registry);
    }
    
    public function _displayReportCenter()
    {
        if (defined('IN_MOBIQUO'))
        {
            global $totalReports, $reports;
            
            $totalReports = 0;
            $reports = array();
            
            $this->registry->getClass('reportLibrary')->checkMemberRSSKey();
            $this->registry->output->addNavigation( $this->lang->words['main_title'], 'app=core&amp;module=reports&amp;do=index' );
            $COM_PERM = $this->registry->getClass('reportLibrary')->buildQueryPermissions();
            $_where = $COM_PERM . ' AND stat.is_active=1';
            
            $total = $this->DB->buildAndFetch( array(
                                                    'select'    => 'COUNT(*) as reports',
                                                    'from'      => array( 'rc_reports_index' => 'rep' ),
                                                    'where'     => $_where,
                                                    'add_join'  => array(
                                                                        array(
                                                                            'from'  => array( 'rc_classes' => 'rcl' ),
                                                                            'where' => 'rcl.com_id=rep.rc_class'
                                                                            ),
                                                                        array(
                                                                            'from'  => array( 'rc_status' => 'stat' ),
                                                                            'where' => 'stat.status=rep.status'
                                                                            )
                                                                        )
                                            )       );
            
            $totalReports = $total['reports'];
            
            if ($total['reports'])
            {
                $this->DB->buildFromCache( 'reports_index', array( 'WHERE' => $_where, 'START' => intval($this->request['st']), 'LIMIT' => $this->request['perpage'] ), 'report_sql_queries' );
                $res = $this->DB->execute();
                
                if ( ! $this->registry->isClassLoaded('topics') )
                {
                    $classToLoad = IPSLib::loadLibrary( IPSLib::getAppDir( 'forums' ) . "/sources/classes/topics.php", 'app_forums_classes_topics', 'forums' );
                    $this->registry->setClass( 'topics', new $classToLoad( $this->registry ) );
                }
                
                while( $row = $this->DB->fetch($res) )
                {
                    $sec_data           = $this->registry->getClass('reportLibrary')->plugins[$row['my_class']]->giveSectionLinkTitle( $row );
                    $row['section']     = $sec_data;
                    $row['post']        = $this->registry->getClass('topics')->getPostById( $row['exdat3'] );
                    
                    if (!isset($row['post']['pid']))
                    {
                        $totalReports--;
                        continue;
                    }
                    
                    $reports[ $row['id'] ]  = $row;
                }
            }
            
            //Get report reason and current report number
            $currentNum = 0;
            foreach ($reports as $rid => $info)
            {
                $currentNum++;
                
                /* Load parser */
                $classToLoad = IPSLib::loadLibrary( IPS_ROOT_PATH . 'sources/classes/text/parser.php', 'classes_text_parser' );
                $parser = new $classToLoad();

                //-----------------------------------------
                // Get reports
                //-----------------------------------------

                $this->DB->buildFromCache( 'grab_report', array( 'COM' => $COM_PERM, 'rid' => $rid ), 'report_sql_queries' );
                $outer = $this->DB->execute();

                while( $row = $this->DB->fetch($outer) )
                {
                    $row['points']      = isset( $row['points'] ) ? $row['points'] :  $this->settings['_tmpPoints'][ $row['id'] ];

                    if( !$options['url'] && $row['url'] )
                    {
                        $options['url'] = $this->registry->getClass('reportLibrary')->processUrl( $row['url'], $row['seoname'], $row['seotemplate'] );
                    }

                    if( !$options['class'] && $row['my_class'] )
                    {
                        $options['class'] = $row['my_class'];
                    }

                    if( $row['my_class'] == 'messages' && !$options['topicID'] && $row['exdat1'] )
                    {
                        $options['topicID'] = intval($row['exdat1']);
                    }

                    $options['title'] = $row['title'];
                    $options['status_id'] = $row['status'];

                    if( !$options['status_icon'] )
                    {
                        $options['status_icon'] = $this->registry->getClass('reportLibrary')->buildStatusIcon( $row );
                        $options['status_text'] = $this->registry->getClass('reportLibrary')->flag_cache[ $row['status'] ][ $row['points'] ]['title'];
                    }

                    /* Stupid stupid stupidness */
                    $row['_title']  = $row['title'];
                    $row['title']   = $row['member_title'];

                    if( $row['member_id'] )
                    {
                        $row['author'] = IPSMember::buildDisplayData( $row );
                    }
                    else
                    {
                        $row['author'] = IPSMember::buildDisplayData( IPSMember::setUpGuest( '' ) );
                    }

                    $row['title']   = $row['_title'];

                    /* Set up some settings */
                    $parser->set( array( 'parseArea'      => 'reports',
                            'memberData'     => $row['author'],
                            'parseBBCode'    => true,
                            'parseHtml'      => false,
                            'parseEmoticons' => true ) );
                    
                    $row['report']  = $parser->display( $row['report'] );

                    $reports[$rid]['reason'][]  = $row;
                    
                    //See if the post reported is the sponsor one of a topic
                    $Topic_sponsor = false;
                    
                    if ( ! $this->registry->isClassLoaded('topics') )
                    {
                        $classToLoad = IPSLib::loadLibrary( IPSLib::getAppDir( 'forums' ) . "/sources/classes/topics.php", 'app_forums_classes_topics', 'forums' );
                        $this->registry->setClass( 'topics', new $classToLoad( $this->registry ) );
                    }
                    
                    $topicData      = $this->registry->getClass('topics')->getTopicById($info['exdat2']);
                    
                    if($topicData['topic_firstpost']==$info['exdat3'])
                        $Topic_sponsor = true;
                        
                    $reports[$rid]['Topic_sponsor']  = $Topic_sponsor;
                }
                
            }
            $totalReports = $currentNum;
            
            //Get ban info
            foreach ($reports as $rid => $info)
            {
                $uid = $info['post']['author_id'];
                $author = IPSMember::buildDisplayData($uid, array('spamStatus' => 1));
                
                $is_spam = $author['spamStatus'] === TRUE;
                $can_mark_spam = $author['spamStatus'] === FALSE && $author['member_id'] != $this->memberData['member_id'];
                
                $reports[$rid]['can_ban'] = $can_mark_spam;
            }
        }
        else
            parent::_displayReportCenter();
    }
}]]></hooks_source>
    </file>
    <file>
      <hook_file_real>tapatalk_conversation.php</hook_file_real>
      <hook_type>commandHooks</hook_type>
      <hook_classname>tapatalk_conversation</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:0:"";s:15:"classToOverload";s:29:"public_members_messaging_send";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[<?php
class tapatalk_conversation extends (~extends~)
{
    public function doExecute( ipsRegistry $registry )
    {
        if (defined('IN_MOBIQUO'))
        {            
            $this->request['auth_key'] = $this->member->form_hash;
            $this->request['authKey']  = $this->member->form_hash;
            
            $_POST['Post']       = cleanPost($_POST['Post']);
            $_POST['msgContent'] = cleanPost($_POST['msgContent']);
            
            //force MobileSkin false
            $this->registry->output->setAsMobileSkin(false);
            
            // Convert POST content from BBCODE to HTML
            $classToLoad = IPSLib::loadLibrary( IPS_ROOT_PATH . 'sources/classes/text/parser.php', 'classes_text_parser' );
            $parser = new $classToLoad();
            
            /* Set up some settings */
            $parser->set( array( 'parseArea'      => 'topics',
                                 'memberData'     => $this->memberData,
                                 'parseBBCode'    => true,
                                 'parseHtml'      => false,
                                 'parseEmoticons' => true ) );
            $parser->setForceBbcode(true);
            
            $_POST['Post']       = $parser->BBCodeToHtml( $_POST['Post'] );
            $_POST['msgContent'] = $parser->BBCodeToHtml( $_POST['msgContent'] );
            
            // Convert POST content from UTF8 to local forum Document character set
            $_POST['Post']       = to_local($_POST['Post']);
            $_POST['msgContent'] = to_local($_POST['msgContent']);
            if (isset($_POST['msg_title']))
                $_POST['msg_title'] = to_local($_POST['msg_title']);
        }
            
        parent::doExecute($registry);
        
        if (defined('IN_MOBIQUO'))
        {
            global $result, $request_name;
            switch ($request_name)
            {
                case 'new_conversation':
                    $result = isset($GLOBALS['new_conv_id']) ? $GLOBALS['new_conv_id'] : true;
                    break;
                case 'reply_conversation':
                    $result = isset($GLOBALS['new_msg_id']) ? $GLOBALS['new_msg_id'] : true;
                    break;
            }
        }
    }
    protected function _showNewTopicForm( $errors='' )
    {
        if (defined('IN_MOBIQUO'))
        {
            $this->registry->getClass('output')->showError($errors);
        }
        else 
        {
            return parent::_showNewTopicForm( $errors );
        }
    }
}]]></hooks_source>
    </file>
    <file>
      <hook_file_real>tapatalk_usercp.php</hook_file_real>
      <hook_type>commandHooks</hook_type>
      <hook_classname>tapatalk_usercp</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:0:"";s:15:"classToOverload";s:33:"public_core_usercp_manualResolver";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[<?php

class tapatalk_usercp extends (~extends~)
{
    public function doExecute( ipsRegistry $registry )
    {
        if (defined('IN_MOBIQUO'))
        {
            $this->request['secure_hash'] = $this->member->form_hash;
            $sig = $post = $_POST['Post'];
            
            //$post escapes HTML
            $post = cleanPost($post);
            
            // Convert $post from BBCODE to HTML
            $classToLoad = IPSLib::loadLibrary( IPS_ROOT_PATH . 'sources/classes/text/parser.php', 'classes_text_parser' );
            $parser = new $classToLoad();
            
            /* Set up some settings */
            $parser->set( array( 'parseArea'      => 'topics',
                                 'memberData'     => $this->memberData,
                                 'parseBBCode'    => true,
                                 'parseHtml'      => false,
                                 'parseEmoticons' => true ) );
            $parser->setForceBbcode(true);
            $post = $parser->BBCodeToHtml( $post );
            
            // Convert POST content from UTF8 to local forum Document character set
            $post = to_local($post);
            
            //set current $_POST
            $_POST['Post'] = $post;
            
            //clean the post again
            $post = cleanPost($post);
            
            //set current $this->request['post']
            $this->request['Post'] = $post;
        }
        parent::doExecute($registry);
        if (defined('IN_MOBIQUO'))
        {
            global $signature,$request_name;
            
            switch ($request_name)
            {
                case 'update_signature':
                    if (defined('FUNC_SUCCESS'))
                    {
                        $signature = $sig;
                    }
                    break;
               
            }
        }
    }
}
]]></hooks_source>
    </file>
  </hookfiles>
  <hookextras_settings>
    <setting>
      <conf_is_title>1</conf_is_title>
      <conf_title_title>Tapatalk BYO Settings</conf_title_title>
      <conf_title_desc><![CDATA[Tapatalk Settings for "Build Your Own" customer.]]></conf_title_desc>
      <conf_title_noshow>0</conf_title_noshow>
      <conf_title_keyword>Tapatalk</conf_title_keyword>
      <conf_title_app>core</conf_title_app>
      <conf_title_tab>Tapatalk</conf_title_tab>
    </setting>
    <setting>
      <conf_is_title>1</conf_is_title>
      <conf_title_title>Tapatalk - General Settings</conf_title_title>
      <conf_title_desc>Tapatalk General Settings</conf_title_desc>
      <conf_title_noshow>0</conf_title_noshow>
      <conf_title_keyword>tapatalk_general</conf_title_keyword>
      <conf_title_app>core</conf_title_app>
      <conf_title_tab>Tapatalk</conf_title_tab>
    </setting>
    <setting>
      <conf_is_title>1</conf_is_title>
      <conf_title_title>Tapatalk - In App Registration</conf_title_title>
      <conf_title_desc>Tapatalk In App Registration Settings</conf_title_desc>
      <conf_title_noshow>0</conf_title_noshow>
      <conf_title_keyword>tapatalk_register</conf_title_keyword>
      <conf_title_app>core</conf_title_app>
      <conf_title_tab>Tapatalk</conf_title_tab>
    </setting>
    <setting>
      <conf_id>357</conf_id>
      <conf_title>Android Product ID</conf_title>
      <conf_description><![CDATA[Enter your BYO App ID from Google Play, to be used on Android device. E.g. "com.quoord.tapatalkpro.activity"]]></conf_description>
      <conf_group>39</conf_group>
      <conf_type>input</conf_type>
      <conf_key>app_android_url</conf_key>
      <conf_value/>
      <conf_default/>
      <conf_extra/>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>3</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>Tapatalk</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>358</conf_id>
      <conf_title>BYO App Banner Message</conf_title>
      <conf_description><![CDATA[E.g. "Follow {your_forum_name} 
with {app_name} for [os_platform]". Do not change the [os_platform] tag as it is displayed dynamically based on user's device platform.]]></conf_description>
      <conf_group>39</conf_group>
      <conf_type>textarea</conf_type>
      <conf_key>app_banner_message</conf_key>
      <conf_value/>
      <conf_default/>
      <conf_extra/>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>1</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>Tapatalk</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>359</conf_id>
      <conf_title>BYO iOS App ID</conf_title>
      <conf_description>Enter your BYO product ID in Apple App Store, to be used on iOS device</conf_description>
      <conf_group>39</conf_group>
      <conf_type>input</conf_type>
      <conf_key>app_ios_id</conf_key>
      <conf_value/>
      <conf_default/>
      <conf_extra/>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>2</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>Tapatalk</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>360</conf_id>
      <conf_title>Kindle Fire Product URL</conf_title>
      <conf_description><![CDATA[Enter your BYO App URL from Amazon App Store, to be used on Kindle Fire device. E.g. "http://www.amazon.com/gp/mas/dl/android?p=com.quoord.tapatalkpro.activity"]]></conf_description>
      <conf_group>39</conf_group>
      <conf_type>input</conf_type>
      <conf_key>app_kindle_url</conf_key>
      <conf_value/>
      <conf_default/>
      <conf_extra/>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>4</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>Tapatalk</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>361</conf_id>
      <conf_title>Thread Content Replacement (Advanced)</conf_title>
      <conf_description><![CDATA[Ability to match and replace thread content using PHP preg_replace function(http://www.php.net/manual/en/function.preg-replace.php). E.g. "'/pattern/i','replacement'" . You can define more than one replace rule on each line.]]></conf_description>
      <conf_group>40</conf_group>
      <conf_type>textarea</conf_type>
      <conf_key>tapatalk_custom_replace</conf_key>
      <conf_value/>
      <conf_default><![CDATA[# For each sample blow, remove the '#' ahead to test
# More infor: http://support.tapatalk.com/threads/advanced-plugin-usage.17106/

# Sample 1, replace all string 'abc' in post content to 'xyz'
# '/abc/', 'xyz'

# Sample 2, replace [JAVA] BBCODE to [QUOTE] for better display in tapatalk
# '/&#092;[java&#092;](.*?)&#092;[&#092;/java&#092;]/si', '[quote]$1[/quote]']]></conf_default>
      <conf_extra/>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>11</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>tapatalk_general</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>362</conf_id>
      <conf_title>Advanced Delete Option</conf_title>
      <conf_description>Allow Admin or Moderators to hard-delete posts or topics via Tapatalk, assuming he has proper permissions. Set this to OFF to enable only soft-delete for admin or moderators via Tapatalk.</conf_description>
      <conf_group>40</conf_group>
      <conf_type>yes_no</conf_type>
      <conf_key>tapatalk_delete_option</conf_key>
      <conf_value/>
      <conf_default>1</conf_default>
      <conf_extra/>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>4</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>tapatalk_general</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>363</conf_id>
      <conf_title>Tapatalk Plugin Directory</conf_title>
      <conf_description><![CDATA[This is an advanced options. If you wish to install Tapatalk in a different directory other than the default 'mobiquo' folder, you will need to update this settings so the plugin will continue to work. Also you need update the same setting in Tapatalk Forum Owner Area. (https://tapatalk.com/landing.php). ** You still need to manually rename the 'mobiquo' directory to something else, modifying this settings does not automatically change the directory physical location.]]></conf_description>
      <conf_group>40</conf_group>
      <conf_type>input</conf_type>
      <conf_key>tapatalk_directory</conf_key>
      <conf_value/>
      <conf_default>mobiquo</conf_default>
      <conf_extra/>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>5</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>tapatalk_general</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>375</conf_id>
      <conf_title>Disable Ads for Group</conf_title>
      <conf_description>This option will prevent Tapatalk from displaying advertisements. Users in the selected groups will not be served ads when using the Tapatalk app.</conf_description>
      <conf_group>40</conf_group>
      <conf_type>multi</conf_type>
      <conf_key>tapatalk_dis_ads</conf_key>
      <conf_value/>
      <conf_default/>
      <conf_extra>#show_groups#</conf_extra>
      <conf_evalphp><![CDATA[if ( $save == 1)
{
    if ( is_array($_POST['tapatalk_dis_ads']) )
    {
        $_POST['tapatalk_dis_ads'] = implode(",",$_POST['tapatalk_dis_ads']);
    }
    else
    {
        $_POST['tapatalk_dis_ads'] = "";
    }
    
    $key = 'tapatalk_dis_ads';
}
if ( $show == 1 )
{
$key = 'tapatalk_dis_ads[]';
}]]></conf_evalphp>
      <conf_protected>1</conf_protected>
      <conf_position>14</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>tapatalk_general</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>364</conf_id>
      <conf_title>Disable New Topic</conf_title>
      <conf_description>Prevent Tapatalk users to create new topic in the selected sub-forums. This feature is useful if certain forums requires additional topic fields or permission that Tapatalk does not support.</conf_description>
      <conf_group>40</conf_group>
      <conf_type>multi</conf_type>
      <conf_key>tapatalk_forum_read</conf_key>
      <conf_value/>
      <conf_default/>
      <conf_extra>#show_forums#</conf_extra>
      <conf_evalphp><![CDATA[if ( $save == 1)
{
    if ( is_array($_POST['tapatalk_forum_read']) )
    {
        $_POST['tapatalk_forum_read'] = implode(",",$_POST['tapatalk_forum_read']);
    }
    else
    {
        $_POST['tapatalk_forum_read'] = "";
    }
    $key = 'tapatalk_forum_read';
}
if ( $show == 1 )
{
$key = 'tapatalk_forum_read[]';
}]]></conf_evalphp>
      <conf_protected>1</conf_protected>
      <conf_position>10</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>tapatalk_general</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>365</conf_id>
      <conf_title>Mobile Welcome Screen</conf_title>
      <conf_description>Tapatalk will show a one time welcoming screen to mobile users to download the free app, the screen will contain your forum logo and branding only, with a button to get the free app.</conf_description>
      <conf_group>40</conf_group>
      <conf_type>yes_no</conf_type>
      <conf_key>tapatalk_full_banner</conf_key>
      <conf_value/>
      <conf_default>1</conf_default>
      <conf_extra/>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>13</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>tapatalk_general</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>366</conf_id>
      <conf_title>Hide Forums</conf_title>
      <conf_description>Hide a particular sub-forums to prevent it to appear from Tapatalk.</conf_description>
      <conf_group>40</conf_group>
      <conf_type>multi</conf_type>
      <conf_key>tapatalk_hide_forum</conf_key>
      <conf_value/>
      <conf_default/>
      <conf_extra>#show_forums#</conf_extra>
      <conf_evalphp><![CDATA[if ( $save == 1)
{
    if ( is_array($_POST['tapatalk_hide_forum']) )
    {
        $_POST['tapatalk_hide_forum'] = implode(",",$_POST['tapatalk_hide_forum']);
    }
    else
    {
        $_POST['tapatalk_hide_forum'] = "";
    }
    
    $key = 'tapatalk_hide_forum';
}
if ( $show == 1 )
{
$key = 'tapatalk_hide_forum[]';
}]]></conf_evalphp>
      <conf_protected>1</conf_protected>
      <conf_position>3</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>tapatalk_general</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>367</conf_id>
      <conf_title>Tapatalk API Key</conf_title>
      <conf_description>Formerly known as Push Key. This key is now required for secure connection between your community and Tapatalk server. Features such as Push Notification and Single Sign-On requires this key to work. You can obtain the key from Tapatalk Forum Owner Area.</conf_description>
      <conf_group>40</conf_group>
      <conf_type>input</conf_type>
      <conf_key>tapatalk_push_key</conf_key>
      <conf_value/>
      <conf_default/>
      <conf_extra/>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>7</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>tapatalk_general</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>371</conf_id>
      <conf_title>User Group Assignment</conf_title>
      <conf_description>You can assign users registered with Tapatalk to specific user groups.  If you do not assign them to a specific group, they will be assigned a default group.</conf_description>
      <conf_group>42</conf_group>
      <conf_type>dropdown</conf_type>
      <conf_key>tapatalk_reg_group</conf_key>
      <conf_value/>
      <conf_default>3</conf_default>
      <conf_extra>#show_groups#</conf_extra>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>3</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>tapatalk_register</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>372</conf_id>
      <conf_title>Registration Options</conf_title>
      <conf_description><![CDATA[<b>Native Registration and Social Sign On (Recommended)</b> - Facebook users can register for your forum using their Facebook credentials, and those not connected to Facebook can register for your forum via an in-app form.<br />
<b>Native Registration Only</b> - No SSO available for Facebook users.  All users must register for the forum via an in-app form.<br />
<b>Redirect to External Registration URL</b> - All users registering for your forum will be redirected to a web browser outside of the app to continue registration.]]></conf_description>
      <conf_group>42</conf_group>
      <conf_type>dropdown</conf_type>
      <conf_key>tapatalk_reg_type</conf_key>
      <conf_value/>
      <conf_default>0</conf_default>
      <conf_extra>0=Native Registration and Social Sign On (Recommended)&#13;
1=Native Registration Only&#13;
2=Redirect to External Registration URL&#13;
</conf_extra>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>1</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>tapatalk_register</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>373</conf_id>
      <conf_title>Registration URL</conf_title>
      <conf_description><![CDATA[This field is required if you select "Redirect to External Registration URL" under "Registration Options".  You do not need to include the forum root URL.]]></conf_description>
      <conf_group>42</conf_group>
      <conf_type>input</conf_type>
      <conf_key>tapatalk_reg_url</conf_key>
      <conf_value/>
      <conf_default><![CDATA[index.php?app=core&amp;module=global&amp;section=register]]></conf_default>
      <conf_extra/>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>2</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>tapatalk_register</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>374</conf_id>
      <conf_title>Spam Prevention</conf_title>
      <conf_description>By enabling StopForumSpam integration, new user registration from Tapatalk app and/or from web will be screened with StopForumSpam database to prevent existing black-listed spammers.</conf_description>
      <conf_group>42</conf_group>
      <conf_type>dropdown</conf_type>
      <conf_key>tapatalk_spam_option</conf_key>
      <conf_value/>
      <conf_default>1</conf_default>
      <conf_extra>0=Disable&#13;
1=Enable StopForumSpam in Tapatalk in-app registration&#13;
2=Enable StopForumSpam in web registration&#13;
3=Enable both</conf_extra>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>4</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>tapatalk_register</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
  </hookextras_settings>
  <hookextras_language/>
  <hookextras_modules/>
  <hookextras_help/>
  <hookextras_templates/>
  <hookextras_css/>
  <hookextras_replacements/>
  <hookextras_tasks/>
  <hookextras_database_create>
    <create>
      <name>tapatalk_users</name>
      <fields><![CDATA[  `userid` int(10) NOT NULL,  `ann` tinyint(1) NOT NULL DEFAULT '1',  `conv` tinyint(1) NOT NULL DEFAULT '1',  `sub` tinyint(1) NOT NULL DEFAULT '1',  `like` tinyint(1) NOT NULL DEFAULT '1',  `quote` tinyint(1) NOT NULL DEFAULT '1',  `newtopic` tinyint(1) NOT NULL DEFAULT '1',  `tag` tinyint(1) NOT NULL DEFAULT '1',  `updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,  PRIMARY KEY (`userid`)]]></fields>
      <tabletype>myisam</tabletype>
    </create>
    <create>
      <name>tapatalk_push_data</name>
      <fields>  `push_id` int(10) NOT NULL AUTO_INCREMENT,  `author` varchar(100) NOT NULL,  `user_id` int(10) NOT NULL,  `data_type` char(20) NOT NULL,  `title` varchar(200) NOT NULL,  `data_id` int(10) NOT NULL,  `create_time` int(10) NOT NULL,  PRIMARY KEY (`push_id`),  KEY `user_id` (`user_id`),  KEY `create_time` (`create_time`)</fields>
      <tabletype>myisam</tabletype>
    </create>
  </hookextras_database_create>
  <hookextras_database_alter>
    <alter>
      <altertype>add</altertype>
      <table>tapatalk_push_data</table>
      <field>sub_id</field>
      <newfield>sub_id</newfield>
      <fieldtype>int(10)</fieldtype>
      <default>0</default>
    </alter>
    <alter>
      <altertype>add</altertype>
      <table>tapatalk_push_data</table>
      <field>author_id</field>
      <newfield/>
      <fieldtype>int(10)</fieldtype>
      <default>0</default>
    </alter>
    <alter>
      <altertype>remove</altertype>
      <table>tapatalk_users</table>
      <field>ann</field>
      <newfield/>
      <fieldtype/>
      <default/>
    </alter>
    <alter>
      <altertype>remove</altertype>
      <table>tapatalk_users</table>
      <field>conv</field>
      <newfield/>
      <fieldtype/>
      <default/>
    </alter>
    <alter>
      <altertype>remove</altertype>
      <table>tapatalk_users</table>
      <field>sub</field>
      <newfield/>
      <fieldtype/>
      <default/>
    </alter>
    <alter>
      <altertype>remove</altertype>
      <table>tapatalk_users</table>
      <field>`like`</field>
      <newfield/>
      <fieldtype/>
      <default/>
    </alter>
    <alter>
      <altertype>remove</altertype>
      <table>tapatalk_users</table>
      <field>quote</field>
      <newfield/>
      <fieldtype/>
      <default/>
    </alter>
    <alter>
      <altertype>remove</altertype>
      <table>tapatalk_users</table>
      <field>newtopic</field>
      <newfield/>
      <fieldtype/>
      <default/>
    </alter>
    <alter>
      <altertype>remove</altertype>
      <table>tapatalk_users</table>
      <field>tag</field>
      <newfield/>
      <fieldtype/>
      <default/>
    </alter>
  </hookextras_database_alter>
  <hookextras_database_update/>
  <hookextras_database_insert/>
</hookexport>
